//Doubly Linked List 

#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
    int data;
    struct Node *next;
}Node;      
Node* head=NULL;        //jab bi kisi pointer variable ko null dete hain matlab ye kisi ko point nahin kar rha hai

Node* createNode(int ele){
    Node* newNode= (Node*)malloc(sizeof(Node));         
    newNode -> data= ele;
    newNode -> next = NULL;
    return newNode;
}


void insertNodeInBeg(int ele){
     Node* newNode=createNode(ele);                //sizeofnode btayega ki memory mein kitni space li  //jis data type me convert karna chhte hai use () me likhenge            
newNode -> next = head;             
        head=newNode;
    printf("Node Inserted!!!\n");
}



void insertNodeAtEnd(int ele){
    Node* newNode=createNode(ele); 
if(head==NULL)
head=newNode;
else{
Node* temp=head;
while(temp -> next !=NULL){
    temp=temp ->next;
}
temp ->next=newNode;
printf("Node Inserted!!!\n");
}}



void insertAtAnyPos(int ele, int pos){
    if(head==NULL)
 printf("List is empty!!!\n");
 else if(pos==1)
 insertNodeInBeg(ele);
 else{
    Node* temp=head;
    int i=1;
    while(i<pos-1 && temp ->next !=NULL){
        temp =temp ->next;
        i++;
    }
    if(temp ->next !=NULL&&i>1){
    Node* newNode= createNode(ele);
    newNode ->next = temp ->next;
    temp ->next = newNode;
    printf("Node Inserted!!!\n");
    }
    else
    printf("Invalid Position!!!\n");
 }
}

void deleteNodeFromBeg(){
    if(head==NULL)
    printf("List is empty!!!\n");
    else{
        Node* temp=head;
        head=head ->next;
        free(temp); 
        printf("Node Deleted!!!\n");
    }
}

void deleteNodeFromEnd(){
if(head==NULL)
printf("List is empty!!!\n");

else{
    Node* t;
    if(head -> next ==NULL){    //this will be the case if their is only 1 node
        t=head;
        head=NULL;
    }
else{
    Node* temp= head;
    while(temp ->next -> next !=NULL){              //check kr rhe hain ki last node null hai ya nahi
        temp=temp ->next;
    }
     t= temp -> next;    //node ka address t pointer ko dia
    temp -> next =NULL;
   }
      free (t);     
       printf("Node Deleted!!!\n");    
}
}

void deleteNodeFromAnyPos(int pos){
if(head==NULL)
printf("List is empty!!!\n");
else if(pos==1)
deleteNodeFromBeg();
else{
    Node* temp = head;
    int i=1;
    while(i<pos-1 && temp -> next !=NULL){
        i++;
        temp=temp ->next;
    }
    if(temp -> next !=NULL && pos>0){
        Node *t= temp -> next;
        temp -> next =temp -> next ->next;
        free(t);
        printf("Node Deleted!!!\n");
    }
    else
    printf("Invalid Position!!!\n");
}
}

void search(int target)
{
if(head==NULL)
printf("List is empty!!!\n");
else{
    Node* temp=head;
    while(temp!=NULL){
        if(temp ->data =target){
            printf("Found!!!\n");
            return;
        }
        temp=temp ->next;
    }
    printf("Not Found!!!\n");
}
}

void sort(){
Node *last = NULL;
for(Node* i=head; i ->next != NULL; i= i ->next){
Node *j;
for(Node* j= head; j ->next !=last; j=j ->next)
{
if(j -> data > j -> next -> data){
int temp= j ->data;
j-> data = j -> next -> data;
j -> next -> data = temp;
}
}
last=j;
}
}


void display(){
    if(head==NULL)
    printf("List is empty!!!\n");
    else{                           //display deletion seaerching ke liye traversing karni padegi
        Node* temp =head;
        while(temp != NULL){
            printf("  %d", temp -> data);
            temp= temp ->next;
    }}}

    int main(){
        while(1){
        printf("\n-----Doubly Linked List-----");
        printf("\n1.Insert Node in the beginning\n");
        printf("2.Insert Node At End\n");
        printf("3.Insert Node At Any Position\n"); 
        printf("4.Delete Node From Beginning\n");
        printf("5.Delete Node From End\n");
        printf("6.Delete Node From Any Position\n");
        printf("7.Search Element In Linked List\n");
        printf("8.Display List\n");
        printf("9.Exit\n\n");
        int choice,value,pos;
        printf("Enter Choice: ");
        scanf("%d",&choice);
        switch(choice){

            case 1:             
            printf("Enter Value: ");
            scanf("%d",&value);
            insertNodeInBeg(value);
            break;

            case 2:
            printf("Enter Value: ");
            scanf("%d",&value);
            insertNodeAtEnd(value);
            break;

            case 3: 
            printf("Enter Value: ");
            scanf("%d",&value);
            printf("Enter Position: ");
            scanf("%d",&pos);
            insertAtAnyPos(value,pos);
            break;


            case 4:
            deleteNodeFromBeg();
            break;


            case 5:
            deleteNodeFromEnd();
            break;


            case 6:
            printf("Enter Position: ");
            scanf("%d",&pos);
            deleteNodeFromAnyPos(pos);
            break;


            case 7:
            printf("Enter Value: ");
            scanf("%d",&value);
            search(value);
            break;


            case 8:
           display();
            break;


            case 9:
             exit(0);
            break;

            default:
            printf("Invalid Choice!!!\n");
        }
printf("/n");
    }
    return 0;
}
