#include<stdio.h>                   
#include<string.h>
#include<malloc.h>
#include<ctype.h>
int preceedence(char op){
    switch(op){
        case'+':

        case'-':
        return 1;
                             
        case'*':

        case'/':
        return 2;      

        case'^':
        return 3;

        default:
        return -1;
    }
}
char* convertInfixToPrefix(char *exp){
    int size=strlen(exp),top=-1, index=0;
    char operator[size];
    char* str= (char*)malloc(size+1);   
    for(int i=size-1; i>=0; i--){
        char ch= exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++]=ch;
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^'){
            if(top==-1)
            operator[++top]=ch;
            else{
                while(top!=-1 && preceedence(ch)<=preceedence(operator[top])){
                    str[index++]=operator[top--];
                }
                operator[++top]=ch;
            }
        }
        else if(ch==')')
        operator[++top]=ch;
        else if(ch=='('){
            while(operator[top]!=')'){
                str[index++]=operator[top--];
            }
            top--;
        }
    }
    while(top!=-1){
        str[index++]=operator[top--];
    }
str[index]='\0';
return strrev(str);         
}
char* convertInfixToPostfix(char *exp){
    int size=strlen(exp),top=-1, index=0;
    char operator[size];
    char* str= (char*)malloc(size+1);    //(size+1) string ke null character ke lie because a string terminates with a null character
    for(int i=0; i<size; i++){
        char ch= exp[i];
        if(isdigit(ch) || isalpha(ch))
        str[index++]=ch;
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^'){
            if(top==-1)
            operator[++top]=ch;
            else{
                while(top!=-1 && preceedence(ch)<=preceedence(operator[top])){
                    str[index++]=operator[top--];
                }
                operator[++top]=ch;
            }
        }
        else if(ch=='(')
        operator[++top]=ch;
        else if(ch==')'){
            while(operator[top]!='('){
                str[index++]=operator[top--];
            }
            top--;
        }
    }
    while(top!=-1){
        str[index++]=operator[top--];
    }
str[index]='\0';
return str;
}

char* convertPostfixtoInfix(char* exp){
    int size= strlen(exp), top=-1;
    char stack[size][100];
    for(int i=0; i<size; i++){
        char ch=exp[i];
        if(isalnum(ch)){
            char temp[]={ch, '\0'};
            strcpy(stack[++top],temp);
        }
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^'){
            char *s1=stack[top--];
            char *s2=stack[top--];
            char s3[100];
            snprintf(s3, 100, "(%s %c %s)", s2, ch,s1);
            strcpy(stack[++top],s3);
        }     
    }
    char *s=stack[top];
    return s;
}

char* convertPrefixtoInfix(char* exp){
    int size= strlen(exp), top=-1;
    char stack[size][100];
    for(int i=size-1 ; i>=0 ; i--){
        char ch=exp[i];
        if(isalnum(ch)){
            char temp[]={ch, '\0'};
            strcpy(stack[++top],temp);
        }
        else if(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^'){
            char *s1=stack[top--];
            char *s2=stack[top--];
            char s3[100];
            snprintf(s3, 100, "(%s %c %s)", s1, ch,s2);
            strcpy(stack[++top],s3);
        }     
    }
    char *s = stack[top];
    return s ;                //char *s=(char*) malloc(strlen(stack[top]+1));           
                    //strcpy(s,stack[top]);
}
int main(){
    char exp[100], exp1[100];
    printf("Enter Infix Expression: ");
    gets(exp);
    printf("Postfix form of Infix Expression %s is %s \n",exp, convertInfixToPostfix(exp)); 
    printf("Prefix form of Infix Expression %s is %s \n",exp, convertInfixToPrefix(exp));

    printf("\nEnter Postfix expression: ");
    gets(exp);
    printf("Infix form of Postfix Expression %s is %s\n", exp, convertPostfixtoInfix(exp));
 
    printf("\nEnter Prefix expression: ");
    gets(exp);
    printf("Infix form of Prefix Expression %s is %s\n", exp, convertPrefixtoInfix(exp));

    return 0;
}


                                   

                                                         

                                
